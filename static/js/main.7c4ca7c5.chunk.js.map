{"version":3,"sources":["awsConfig.js","App.js","serviceWorker.js","index.js"],"names":["instanceId","ec2","apiVersion","region","accessKeyId","secretAccessKey","convertResponseTypes","monitorRefreshTime","about","StopInstance","props","onClick","updateInstanceStatus","params","InstanceIds","config","DryRun","Force","stopInstances","err","data","console","log","stack","setTimeout","className","StartInstance","startInstances","InstanceStatusMonitor","aboutURL","href","instanceStatus","App","state","window","AWS","EC2","this","monitorInstanceStatus","setInterval","bind","describeInstanceStatus","InstanceStatuses","InstanceState","Name","status","setState","React","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6RAAe,G,YAAA,CACbA,WAAY,sBACZC,IAAK,CACHC,WAAY,aACZC,OAAQ,YACRC,YAAa,uBACbC,gBAAiB,2CACjBC,sBAAsB,GAExBC,mBAAoB,IACpBC,MAAO,oBCmDT,SAASC,EAAaC,GAiBpB,OACE,4BACE,4BAAQC,QAlBI,WACdD,EAAME,qBAAqB,YAE3B,IAAMC,EAAS,CACbC,YAAa,CAACC,EAAOf,YACrBgB,QAAQ,EACRC,OAAO,GAGTP,EAAMT,IAAIiB,cAAcL,GAAQ,SAASM,EAAKC,GACxCD,EAAKE,QAAQC,IAAIH,EAAKA,EAAII,OACzBF,QAAQC,IAAIF,GACjBI,YAAW,kBAAMd,EAAME,qBAAqB,aAAY,SAM9Ba,UAAU,oBAApC,kBAON,SAASC,EAAchB,GAcrB,OACE,4BACE,4BAAQC,QAfI,WACdD,EAAME,qBAAqB,YAE3B,IAAMC,EAAS,CACbC,YAAa,CAACC,EAAOf,aAGvBU,EAAMT,IAAI0B,eAAed,GAAQ,SAASM,EAAKC,GACzCD,EAAKE,QAAQC,IAAIH,EAAKA,EAAII,OACzBF,QAAQC,IAAIF,OAMSK,UAAU,sBAApC,mBAON,SAASG,EAAsBlB,GAC7B,IAAMmB,EAAW,WAAad,EAAOP,MACrC,OACE,0BAAMiB,UAAU,kBACd,uBAAGA,UAAU,WAAWK,KAAMD,GAC3Bd,EAAOP,OACL,IAHP,KAIKE,EAAMqB,gBAKAC,M,YApHb,WAAYtB,GAAQ,IAAD,8BACjB,4CAAMA,KACDuB,MAAQ,CAAEF,eAAgB,IAC/B,EAAK9B,IAAM,IAAIiC,OAAOC,IAAIC,IAAIrB,EAAOd,KAHpB,E,iFAOjBoC,KAAKC,wBACLC,YAAYF,KAAKC,sBAAsBE,KAAKH,MAAOtB,EAAOR,sB,+BAI1D,OACE,yBAAKkB,UAAU,OACb,4BAAQA,UAAU,cAChB,wBAAIA,UAAU,gBACZ,kBAACC,EAAD,CAAezB,IAAKoC,KAAKpC,IAAKW,qBAAsByB,KAAKzB,qBAAqB4B,KAAKH,QACnF,kBAAC5B,EAAD,CAAcR,IAAKoC,KAAKpC,IAAKW,qBAAsByB,KAAKzB,qBAAqB4B,KAAKH,SAEpF,kBAACT,EAAD,CAAuBG,eAAgBM,KAAKJ,MAAMF,qB,8CAOxD,IAAMlB,EAAS,CACbC,YAAa,CAACC,EAAOf,aAEvBqC,KAAKpC,IAAIwC,uBACP5B,EACA,SAASM,EAAKC,GACZ,GAAID,EAAKE,QAAQC,IAAIH,EAAKA,EAAII,WACzB,CACHF,QAAQC,IAAIF,GACZ,IAAMW,EACHX,GACCA,EAAKsB,kBACLtB,EAAKsB,iBAAiB,IACtBtB,EAAKsB,iBAAiB,GAAGC,eACzBvB,EAAKsB,iBAAiB,GAAGC,cAAcC,MACzCP,KAAKJ,MAAMF,eACbM,KAAKzB,qBAAqBmB,KAE5BS,KAAKH,S,2CAIUQ,GACfA,IAAWR,KAAKJ,MAAMF,gBACxBM,KAAKS,SAAS,CAAEf,eAAgBc,Q,GAnDpBE,IAAMC,WCOJC,QACW,cAA7Bf,OAAOgB,SAASC,UAEe,UAA7BjB,OAAOgB,SAASC,UAEhBjB,OAAOgB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.7c4ca7c5.chunk.js","sourcesContent":["export default {\n  instanceId: 'i-057900d7f2c81263f',\n  ec2: {\n    apiVersion: '2016-11-15',\n    region: 'us-east-1',\n    accessKeyId: 'AKIAJVQ6GUOQJ2B6AADQ',\n    secretAccessKey: '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',\n    convertResponseTypes: true\n  },\n  monitorRefreshTime: 5000,\n  about: 'jacobperuva.com'\n};\n","import React from 'react';\nimport './App.css';\nimport './button.css';\nimport config from './awsConfig';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { instanceStatus: '' };\n    this.ec2 = new window.AWS.EC2(config.ec2);\n  }\n\n  componentDidMount() {\n    this.monitorInstanceStatus();\n    setInterval(this.monitorInstanceStatus.bind(this), config.monitorRefreshTime);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <ul className=\"button-group\">\n            <StartInstance ec2={this.ec2} updateInstanceStatus={this.updateInstanceStatus.bind(this)} />\n            <StopInstance ec2={this.ec2} updateInstanceStatus={this.updateInstanceStatus.bind(this)} />\n          </ul>\n          <InstanceStatusMonitor instanceStatus={this.state.instanceStatus} />\n        </header>\n      </div>\n    );\n  }\n\n  monitorInstanceStatus() {\n    const params = {\n      InstanceIds: [config.instanceId]\n    };\n    this.ec2.describeInstanceStatus(\n      params,\n      function(err, data) {\n        if (err) console.log(err, err.stack);\n        else {\n          console.log(data);\n          const instanceStatus =\n            (data &&\n              data.InstanceStatuses &&\n              data.InstanceStatuses[0] &&\n              data.InstanceStatuses[0].InstanceState &&\n              data.InstanceStatuses[0].InstanceState.Name) ||\n            this.state.instanceStatus;\n          this.updateInstanceStatus(instanceStatus);\n        }\n      }.bind(this)\n    );\n  }\n\n  updateInstanceStatus(status) {\n    if (status !== this.state.instanceStatus) {\n      this.setState({ instanceStatus: status });\n    }\n  }\n}\n\nfunction StopInstance(props) {\n  const stopper = () => {\n    props.updateInstanceStatus('stopping');\n\n    const params = {\n      InstanceIds: [config.instanceId],\n      DryRun: false,\n      Force: false\n    };\n\n    props.ec2.stopInstances(params, function(err, data) {\n      if (err) console.log(err, err.stack);\n      else console.log(data);\n      setTimeout(() => props.updateInstanceStatus('stopped'), 30000);\n    });\n  };\n\n  return (\n    <li>\n      <button onClick={stopper} className=\"large red button\">\n        Stop Instance\n      </button>\n    </li>\n  );\n}\n\nfunction StartInstance(props) {\n  const starter = () => {\n    props.updateInstanceStatus('starting');\n\n    const params = {\n      InstanceIds: [config.instanceId]\n    };\n\n    props.ec2.startInstances(params, function(err, data) {\n      if (err) console.log(err, err.stack);\n      else console.log(data);\n    });\n  };\n\n  return (\n    <li>\n      <button onClick={starter} className=\"large green button\">\n        Start Instance\n      </button>\n    </li>\n  );\n}\n\nfunction InstanceStatusMonitor(props) {\n  const aboutURL = 'https://' + config.about;\n  return (\n    <span className=\"instanceStatus\">\n      <a className=\"App-link\" href={aboutURL}>\n        {config.about}\n      </a>{' '}\n      - {props.instanceStatus}\n    </span>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}